var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = NeuroDynamics","category":"page"},{"location":"#NeuroDynamics","page":"Home","title":"NeuroDynamics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Generative modeling of Neural Dynamics","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for NeuroDynamics.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [NeuroDynamics]","category":"page"},{"location":"#NeuroDynamics.Decoder","page":"Home","title":"NeuroDynamics.Decoder","text":"Decoder\n\nA decoder is a function that takes a latent variable and produces an output (Observations or Control inputs).    \n\n\n\n\n\n","category":"type"},{"location":"#NeuroDynamics.Decoder-Tuple{Any, Any, Any}","page":"Home","title":"NeuroDynamics.Decoder","text":"(model::Decoder)(x::AbstractArray, p::ComponentVector, st::NamedTuple)\n\nThe forward pass of the decoder.\n\nArguments:\n\nx: The input to the decoder.\np: The parameters.\nst: The state.\n\nreturns:\n\n- 'ŷ': The output of the decoder.\n- 'st': The state of the decoder.\n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.Encoder","page":"Home","title":"NeuroDynamics.Encoder","text":"Encoder\n\nAn encoder is a container layer that contains three sub-layers: linear_net, init_net, and context_net.\n\nFields\n\nlinear_net: A layer that maps the input to a hidden representation.\ninit_net: A layer that maps the hidden representation to the initial hidden state.\ncontext_net: A layer that maps the hidden representation to the context.\n\n\n\n\n\n","category":"type"},{"location":"#NeuroDynamics.Encoder-Tuple{Any, Any, Any}","page":"Home","title":"NeuroDynamics.Encoder","text":"(model::Encoder)(x::AbstractArray, p::ComponentVector, st::NamedTuple)\n\nThe forward pass of the encoder.\n\nArguments:\n\nx: The input to the encoder (e.g. observations).\np: The parameters.\nst: The state of the encoder.\n\nreturns:\n\n- `x̂₀`: The initial hidden state.\n- `context`: The context.\n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.LatentUDE","page":"Home","title":"NeuroDynamics.LatentUDE","text":"LatentUDE(obs_encoder, ctrl_encoder, dynamics, obs_decoder, ctrl_decoder)\n\nConstructs a Latent Universal Differential Equation model.\n\nArguments:\n\nobs_encoder: A function that encodes the observations y to get the initial hidden state x₀ and context for the dynamics if needed (Partial observability) \nctrl_encoder: A function that encodes (high-dimensional) inputs/controls to a lower-dimensional representation if needed.\ndynamics: A function that models the dynamics of the system (your ODE/SDE).\nobs_decoder: A function that decodes the hidden states x to the observations y.\n'ctrl_decoder': A function that decodes the control representation to the original control space if needed.\n'device': The device on which the model is stored. Default is cpu. \n\n\n\n\n\n","category":"type"},{"location":"#NeuroDynamics.LatentUDE-Tuple{AbstractArray, Union{Nothing, AbstractArray}, AbstractArray, ComponentArrays.ComponentArray, NamedTuple}","page":"Home","title":"NeuroDynamics.LatentUDE","text":"(model::LatentUDE)(y::AbstractArray, u::Union{Nothing, AbstractArray}, ts::AbstractArray, ps::ComponentArray, st::NamedTuple)\n\nThe forward pass of the LatentUDE model.\n\nArguments:\n\ny: Observations\nu: Control inputs\nts: Time points\nps: Parameters\nst: NamedTuple of states \n\nReturns:\n\nŷ: Decoded observations from the hidden states.\nū: Decoded control inputs from the hidden states.\nx̂₀: Encoded initial hidden state.\nkl_path: KL divergence path. (Only for SDE dynamics, otherwise nothing)\n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.MultiDecoder","page":"Home","title":"NeuroDynamics.MultiDecoder","text":"MultiDecoder\n\nA MultiDecoder is a function that takes a latent variable and produces multiple outputs (Observations or Control inputs).\n\nFields:\n\nshared_net: The shared network.\ndecoders: The decoders.\n\n\n\n\n\n","category":"type"},{"location":"#NeuroDynamics.MultiDecoder-Tuple{Any, Any, Any}","page":"Home","title":"NeuroDynamics.MultiDecoder","text":"(model::MultiDecoder)(x::AbstractArray, p::ComponentArray, st::NamedTuple)\n\nThe forward pass of the MultiDecoder.\n\nArguments:\n\nx: The input to the decoder.\np: The parameters.\nst: The state.\n\nreturns:\n\n- 'ŷ': The Tuple of outputs of the decoders.\n- 'st': The states of the decoder.\n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.Identity_Decoder-Tuple{}","page":"Home","title":"NeuroDynamics.Identity_Decoder","text":"Identity_Decoder()\n\nConstructs an identity decoder. Useful for fully observable systems.\n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.Linear_Decoder","page":"Home","title":"NeuroDynamics.Linear_Decoder","text":"Linear_Decoder(obs_dim, latent_dim)\n\nConstructs a linear decoder.\n\nArguments:\n\nobs_dim: Dimension of the observations.\nlatent_dim: Dimension of the latent space. \nnoise: Type of observation noise. Default is Gaussian. Options are Gaussian, Poisson, None.\n\nreturns: \n\n- The decoder.\n\n\n\n\n\n","category":"function"},{"location":"#NeuroDynamics.MLP_Decoder","page":"Home","title":"NeuroDynamics.MLP_Decoder","text":"MLP_Decoder(obs_dim, latent_dim, hidden_dim, n_hidden)\n\nConstructs an MLP decoder.\n\nArguments:\n\nobs_dim: Dimension of the observations.\nlatent_dim: Dimension of the latent space.\nhidden_dim: Dimension of the hidden layers.\nn_hidden: Number of hidden layers.\nnoise: Type of observation noise. Default is Gaussian. Options are Gaussian, Poisson, None.\n\nreturns: \n\n- The decoder.\n\n\n\n\n\n","category":"function"},{"location":"#NeuroDynamics.Nothing_Decoder-Tuple{}","page":"Home","title":"NeuroDynamics.Nothing_Decoder","text":"Nothing_Decoder()\n\nConstructs a decoder that does nothing. \n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.bits_per_spike-Tuple{Any, Any}","page":"Home","title":"NeuroDynamics.bits_per_spike","text":"bits_per_spike(rates, spikes)\n\nCompute the bits per spike by comparing the Poisson log-likelihood of the rates with the Poisson log-likelihood of the mean spikes. \n\nArguments:\n\nrates: The predicted rates.\nspikes: The observed spikes.\n\nreturns: \n\n- The bits per spike.\n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.forward!-Tuple{LatentUDE, AbstractArray, Union{Nothing, AbstractArray}, AbstractArray, ComponentArrays.ComponentArray, NamedTuple, ODE}","page":"Home","title":"NeuroDynamics.forward!","text":"forward!(model::LatentUDE, y::AbstractArray, u::Union{Nothing, AbstractArray}, ts::AbstractArray, ps::ComponentArray, st::NamedTuple, dynamics::ODE)\n\nThe forward pass of the LatentODE model.\n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.forward!-Tuple{LatentUDE, AbstractArray, Union{Nothing, AbstractArray}, AbstractArray, ComponentArrays.ComponentArray, NamedTuple, SDE}","page":"Home","title":"NeuroDynamics.forward!","text":"forward!(model::LatentUDE, y::AbstractArray, u::Union{Nothing, AbstractArray}, ts::AbstractArray, ps::ComponentArray, st::NamedTuple, dynamics::SDE)\n\nThe forward pass of the LatentSDE model.\n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.frange_cycle_linear-Union{Tuple{Any}, Tuple{T}, Tuple{Any, T}, Tuple{Any, T, T}, Tuple{Any, T, T, Any}, Tuple{Any, T, T, Any, Any}} where T","page":"Home","title":"NeuroDynamics.frange_cycle_linear","text":"frange_cycle_linear(n_iter, start, stop, n_cycle, ratio)\n\nGenerate a linear schedule with cycles.\n\nArguments:\n\nn_iter: Number of iterations.\nstart: Start value.\nstop: Stop value.\nn_cycle: Number of cycles.\nratio: Ratio of the linear schedule.\n\nreturns: \n\n- The linear schedule.\n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.interp!-Tuple{Any, AbstractArray, Any}","page":"Home","title":"NeuroDynamics.interp!","text":"interp!(ts, cs, time_point)\n\nInterpolates the control signal at a given time point.\n\nArguments:\n\nts: Array of time points.\ncs: Array of control signals.\ntime_point: The time point at which to interpolate the control signal.\n\nreturns: \n\n- The interpolated control signal.\n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.kl_normal-Tuple{Any, Any}","page":"Home","title":"NeuroDynamics.kl_normal","text":"kl_normal(μ, σ²)\n\nCompute the KL divergence between a normal distribution and a standard normal distribution.\n\nArguments:\n\nμ: Mean of the normal distribution.\nσ²: Variance of the normal distribution.\n\nreturns: \n\n- The KL divergence.\n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.mse-Tuple{Any, Any}","page":"Home","title":"NeuroDynamics.mse","text":"mse(ŷ, y)\n\nCompute the mean squared error.\n\nArguments:\n\nŷ: Predicted values.\ny: Observed values.\n\nreturns: \n\n- The mean squared error.\n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.normal_loglikelihood-Tuple{Any, Any, Any}","page":"Home","title":"NeuroDynamics.normal_loglikelihood","text":"normal_loglikelihood(μ, σ², y)\n\nCompute the log-likelihood of a normal distribution.\n\nArguments:\n\nμ: Mean of the normal distribution.\nσ²: Variance of the normal distribution.\ny: The observed values.\n\nreturns: \n\n- The log-likelihood.\n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.poisson_loglikelihood-Tuple{Any, Any}","page":"Home","title":"NeuroDynamics.poisson_loglikelihood","text":"poisson_loglikelihood(λ, y)\n\nCompute the log-likelihood of a Poisson distribution.\n\nArguments:\n\nλ: The rate of the Poisson distribution.\ny: The observed spikes.\n\nreturns: \n\n- The log-likelihood.\n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.predict-Tuple{LatentUDE, AbstractArray, Union{Nothing, AbstractArray}, AbstractArray, ComponentArrays.ComponentArray, NamedTuple, Int64}","page":"Home","title":"NeuroDynamics.predict","text":"predict(model::LatentUDE, y::AbstractArray, u::Union{Nothing, AbstractArray}, ts::AbstractArray, ps::ComponentArray, st::NamedTuple, n_samples::Int)\n\nSamples trajectories from the LatentUDE model.\n\nArguments:\n\nmodel: The LatentUDE model to sample from.\ny: Observations used to encode the initial hidden state. \nu: Inputs for the input encoder. Can be Nothing or an array.\nts: Array of time points at which to sample the trajectories.\nps: Parameters for the model.\nst: NamedTuple of states for different components of the model.\nn_samples: Number of samples used to make the prediction.\n\nReturns:\n\nŷ: Decoded observations from the sampled hidden states * n_samples.\nū: Decoded control inputs from the sampled hidden states * n_samples.\nx: Sampled hidden state trajectories * n_samples.\n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.sample_dynamics-Tuple{ODE, Vararg{Any, 6}}","page":"Home","title":"NeuroDynamics.sample_dynamics","text":"sample_dynamics(de::ODE, x̂₀, u, ts, p, st, n_samples)\n\nSamples trajectories from the ODE model.\n\nArguments:\n\nde: The ODE model to sample from.\nx̂₀: The initial hidden state.\nu: Inputs for the input encoder. Can be Nothing or an array.\nts: Array of time points at which to sample the trajectories.\np: The parameters.\nst: The state.\nn_samples: The number of samples to generate.\n\nreturns:      - The sampled trajectories.     - The state of the model.\n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.sample_dynamics-Tuple{SDE, Vararg{Any, 6}}","page":"Home","title":"NeuroDynamics.sample_dynamics","text":"sample_dynamics(de::SDE, x̂₀, u, ts, p, st, n_samples)\n\nSamples trajectories from the SDE model.\n\nArguments:\n\nde: The SDE model to sample from.\nx̂₀: The initial hidden state.\nu: Inputs for the input encoder. Can be Nothing or an array.\nts: Array of time points at which to sample the trajectories.\np: The parameters.\nst: The state.\nn_samples: The number of samples to generate.\n\nreturns:      - The sampled trajectories.     - The state of the model.\n\n\n\n\n\n","category":"method"},{"location":"#NeuroDynamics.sample_rp-Tuple{Tuple}","page":"Home","title":"NeuroDynamics.sample_rp","text":"sample_rp(x::Tuple)\n\nSamples from a MultiVariate Normal distribution using the reparameterization trick.\n\nArguments:\n\nx: Tuple of the mean and squared variance of a MultiVariate Normal distribution.\n\nreturns: \n\n- The sampled value.\n\n\n\n\n\n","category":"method"}]
}
